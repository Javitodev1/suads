---
import type { HTMLTag, Polymorphic } from 'astro/types'
import { getTextColor } from '@/utils/colors'
import type { Color } from '@/types/utils'

const Variants = {
  banner: 'text-5xl font-extrabold uppercase',
  title: 'text-5xl font-extrabold uppercase leading-tight',
  subtitle: 'text-2xl font-bold',
  body: 'text-lg',
  sidecard_title: 'text-lg font-bold',
  sidecard_body: 'text-base',
  cta: 'text-base font-bold',
  big_number: 'text-8xl font-bold',
  body_number: 'text-2xl',
  spaced: 'text-xs font-semibold tracking-[0.17rem] leading-loose uppercase',
}

const FontFamily = 'font-open-sauce-sans'

type Variant = keyof typeof Variants

export type { Variant as TypographyVariant }

type Props<Tag extends HTMLTag> = Polymorphic<{
  as: Tag
  variant: Variant
  color: Color
  class?: string
}>

const {
  as: Tag,
  class: className,
  variant,
  color,
  ...props
} = Astro.props as {
  as: HTMLTag
  variant: Variant
  color: Color
  class: String
}
const strongCss = '[&_strong]:text-accent-title'

const classes = [
  strongCss,
  className,
  FontFamily,
  Variants[variant],
  getTextColor(color),
]
---

<Tag
  class:list={[classes]}
  {...props}>
  <slot />
</Tag>
