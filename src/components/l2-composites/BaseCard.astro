---
import { BaseText, GradientContainer } from '@/components'
import type { BaseTextTheme, Gradient } from '@/components/types'

interface VariantFields {
  gradient: Gradient
  theme: BaseTextTheme
}

const Shapes = {
  full: 'size-full',
  fit: 'size-fit',
  none: '',
}

const Variants = {
  light: {
    gradient: 'light',
    theme: 'dark',
  } satisfies VariantFields,

  dark: {
    gradient: 'dark',
    theme: 'light',
  } satisfies VariantFields,

  transparent_light: {
    gradient: 'transparent',
    theme: 'dark',
  } satisfies VariantFields,

  transparent_dark: {
    gradient: 'transparent',
    theme: 'light',
  } satisfies VariantFields,
}

type Variant = keyof typeof Variants
type Shape = keyof typeof Shapes

export type { Variant as BaseCardVariant, Shape as BaseCardShape }

interface Props {
  variant: Variant
  shape: Shape
  class?: string
}

const { variant, shape, class: className } = Astro.props

const { gradient, theme } = Variants[variant]
const classes = [className, Shapes[shape]]
---

<GradientContainer
  variant={'card'}
  gradient={gradient}
  class:list={classes}>
  <slot name='after' />

  <BaseText
    variant={'card'}
    theme={theme}>
    <slot
      name='header'
      slot='header'>
      No slot header
    </slot>
    <slot
      name='body'
      slot='body'>
      No slot body
    </slot>
  </BaseText>

  <slot name='before' />
</GradientContainer>
